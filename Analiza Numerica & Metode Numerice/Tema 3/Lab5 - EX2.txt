#EX2
import numpy as np
import matplotlib.pyplot as plt

fig, axs = plt.subplots(2)
def f(x):
    y = np.e ** (2*x)
    return y

def MetLagrange(f , a , b , n , x):
    X = np.linspace(a , b , n + 1)
    Y = f(X)
    A = np.vander(X) #defineste o matrice vandermont pentru x
    C = np.linalg.solve(A , Y)
    C = np.flip(C)
    y = 0
    Ln = []
    for i in range(n + 1):
        L = 1
        for j in range(n + 1):
            if j != i:
                L = L * (x - X[j]) / (X[i] - X[j])
        Ln.append(L)
        y += Ln[i] * f(X[i])

    return y


def PlotInterpolare(f , a , b , n , metoda):
    X = np.linspace(a , b , n + 1)
    x_grafic = np.linspace(a , b , 50 * n + 1)
    Pn = []
    for x in x_grafic:
        Pn.append(metoda(f , a , b , n , x))
    axs[0].plot(x_grafic , Pn , linestyle = "--")
    axs[0].plot(x_grafic , f(x_grafic))
    axs[1].plot(x_grafic , np.abs(f(x_grafic) - Pn)) #eroarea absoluta
    axs[0].scatter(X , f(X))
    axs[1].scatter(X , np.zeros(n+1))
PlotInterpolare(f , -1 , 1 , 4 , MetLagrange)