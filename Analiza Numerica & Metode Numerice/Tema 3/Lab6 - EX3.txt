import numpy as np
import matplotlib.pyplot as plt
fig, axs = plt.subplots(2)

def f(x):
    y = np.e ** (2*x)
    return y


def MetNewtonDD( f , a , b , n , x):
    X = np.linspace(a, b, n + 1)
    Y = f(X)
    for j in range(1, n + 1):
        for i in range(n, j - 1, -1):
            Y[i] = (Y[i] - Y[i - 1]) / (X[i] - X[i - j])
    y = Y[n]
    for i in range(n - 1, -1, -1):
        y = y * (x - X[i]) + Y[i]
    return y


def PlotInterpolare(f , a , b , n , metoda):
    X = np.linspace(a , b , n + 1)
    Y = f(X)
    x_grafic = np.linspace(a , b , 50 * n + 1)
    Pn = []
    for x in x_grafic:
        Pn.append(metoda(f , a, b , n , x))
    axs[0].plot(x_grafic , Pn , linestyle = "--")
    axs[0].plot(x_grafic , f(x_grafic))
    axs[1].plot(x_grafic , np.abs(f(x_grafic) - Pn)) #eroarea absoluta
    axs[0].scatter(X , f(X))
    axs[1].scatter(X , np.zeros(n+1))

PlotInterpolare(f , -1 , 1 , 4 , MetNewtonDD)